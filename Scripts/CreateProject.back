[CmdLetBinding()]
Param(
    [Parameter(Mandatory=$true)]
    [string] $Organization,
    [Parameter(Mandatory=$true)]
    [string] $ProjectName,
    [Parameter()]
    [string] $ProjectDescription,
    [Parameter(Mandatory=$true)]
    [string] $PersonalAccessToken,
    [Parameter()]
    [ValidateSet("Git","TFVC")]
    [string] $VersionControl = "Git",
    [Parameter()]
    [string] $ProcessTemplate = "Scrum"
)

Set-StrictMode -Version Latest
Set-Variable SerializationDepth -Option Constant -Value 100 -ErrorAction SilentlyContinue

#region Internal Functions
Function Invoke-DevOpsAPI
{
[CmdletBinding()]
Param(
    [parameter(Position=0, Mandatory=$true)]
    [string] $Uri,
    [Parameter(Position=1)]
    [string] [ValidateSet('Default','Get', 'Post')]
    $Method = 'Get',
    [parameter(Position=2, Mandatory=$true)]
    [string] $PersonalAccessToken,
    [Parameter(Position=3)]
    [object] $Body,
    [Parameter(Position=4)]
    [string] $ContentType
)
    [string] $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "",$PersonalAccessToken)))

    [hashtable] $AuthHeader = 
    @{ 
        Authorization = "Basic $base64AuthInfo"
    }

    [hashtable] $params =
    @{
        'Uri'= $Uri;
        'Headers'= $AuthHeader;
        'Method'= $Method;
    }

    if (!($null -eq $Body))
    {
        $params += @{'Body' = $Body}
    }
    if (![string]::IsNullOrEmpty($ContentType))
    {
        $params += @{'ContentType' = $ContentType }
    }

    try {
        return Invoke-RestMethod -UseBasicParsing @params        
    }
    catch {
        Write-Error "$($_.Exception.Message)"
        
    }

}

Function Find-ProcessTemplate {
    Param (
        [string] $Organization,    
        [string] $ProcessTemplate,
        [string] $PersonalAccessToken
    )
    # Get a list of process template for a given Organization/Collection
    [string] $Uri = "$Organization/_apis/process/processes"
    $result = Invoke-DevOpsAPI -Uri $Uri -PersonalAccessToken $PersonalAccessToken
    if (($null -eq $result) -or ($result.Count -eq 0)) {
        return $null
    }
    # Loop through the process templates and check by Name
    foreach ($process in $result.Value) {
        if ($process.name -eq $ProcessTemplate) {
            return $process
        }
    }
    # Template not found
    return $null
}

Function Find-TeamProject {
    Param(
        [string] $Organization,    
        [string] $ProjectName,
        [string] $PersonalAccessToken
    )
    # Get a list of projects for a given Organization/Collection
    [string] $Uri = "$Organization/_apis/projects?api-version=6.1-preview.4"
    $result = Invoke-DevOpsAPI -Uri $Uri -PersonalAccessToken $PersonalAccessToken
    if (($null -eq $result) -or ($result.Count -eq 0)) {
        return $null
    }
    # Loop through the projects and check by Name
    foreach ($project in $result.Value) {
        if ($project.name -eq $ProjectName) {
            return $project
        }
    }
    # Project not found
    return $null
}

Function New-TeamProject {
    Param(
        [string] $Organization,    
        [string] $ProjectName,
        [string] $ProjectDescription,
        [string] $VersionControl,
        [string] $TemplateId,
        [string] $PersonalAccessToken
    )
    [string] $Uri = "$Organization/_apis/projects?api-version=6.0"
    [hashtable] $body = @{
        "name" = "$ProjectName"
        "capabilities" = @{ "versioncontrol" = @{ "sourceControlType" = $VersionControl}
                            "processTemplate" = @{ "templateTypeId" = $TemplateId }
        }
        "visibility" = "private"
    }
    if (![string]::IsNullOrEmpty($ProjectDescription)) {
        $body += @{ "description"=$ProjectDescription}
    }
    else {
        $body += @{"description"="Autogenerated by Scrpipt"}
    }
    return Invoke-DevOpsAPI -Uri $Uri -PersonalAccessToken $PersonalAccessToken `
        -Method Post `
        -Body (ConvertTo-Json $body -Depth $SerializationDepth) `
        -ContentType 'application/json'
}

Function Get-Operation {
    Param (
        [string] $Organization,    
        [string] $OperationId,
        [string] $PersonalAccessToken
    )
    [string] $Uri = "$Organization/_apis/operations/$OperationId"
    return Invoke-DevOpsAPI -Uri $Uri -PersonalAccessToken $PersonalAccessToken
}
#endregion

############################################################
# Main Entry Point
############################################################

# Find Process Template by Name
$template = Find-ProcessTemplate -Organization $Organization -ProcessTemplate $ProcessTemplate -PersonalAccessToken $PersonalAccessToken
if ($null -eq $template) {
    Write-Host -ForegroundColor Red "Template '$ProcessTemplate' not found in '$Organization'"
    exit 1
}
# Check if Projects already exists
if ($null -ne (Find-TeamProject -Organization $Organization -ProjectName $ProjectName -PersonalAccessToken $PersonalAccessToken)) {
    Write-Host -ForegroundColor Red "Project '$ProjectName' already exists in '$Organization'"
    exit 2
}
# Create Team Project
Write-Host "Creating Project '$ProjectName'" -NoNewline -ForegroundColor Yellow
$result = New-TeamProject `
            -Organization $Organization `
            -ProjectName $ProjectName -ProjectDescription $ProjectDescription `
            -VersionControl $VersionControl `
            -TemplateId $template.id `
            -PersonalAccessToken $PersonalAccessToken
# Get Operation results
$operation = Get-Operation -Organization $Organization -OperationId $result.id -PersonalAccessToken $PersonalAccessToken
if ($result.status -notin 'queued', 'succeeded', 'notSet')
{
    Write-Host ""
    Write-Host -ForegroundColor Red "Project creation faild! Status: '$($result.status)'"
    Write-Host -ForegroundColor Red $operation.resultMessage
    exit 3
}
# Wait for Project creation to finish
Do {
    Write-Host "." -ForegroundColor Yellow -NoNewline
    Start-Sleep -Seconds 1 
    $operation = Get-Operation -Organization $Organization -OperationId $result.id -PersonalAccessToken $PersonalAccessToken
} while($operation.status -eq "inProgress")
# Write result of Operation
switch ($operation.status) {
    "succeeded" { Write-Host ""; Write-Host -ForegroundColor Green "Project Creation Succeeded!"; exit 0  }
    Default { Write-Host -ForegroundColor Red "Project creation failed! $($operation.resultMessage)" exit 3}
}



